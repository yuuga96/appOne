#include"libOne.h"
struct DATA {
    //画像番号
    int playerGuImg;   
    int playerChokiImg;
    int playerPaImg;   
    int pcGuImg;       
    int pcChokiImg;    
    int pcPaImg;
    int heartImg;
    //手の番号定数
    const int GU = 0;
    const int CHOKI = 1;
    const int PA = 2;
    //プレイヤーデータカード
    int playerHand;
    int playerImg;
    int playerLife;
    float playerPx;
    float playerPy;
    float playerR;
    float playerG;
    float playerB;
    float playerAngle;
    //ＰＣデータカード
    int pcHand;
    int pcImg;
    int pcLife;
    float pcPx;
    float pcPy;
    float pcR;
    float pcG;
    float pcB;
    float pcAngle;
    //勝ち負け文字用カード
    float resultPx;
    float resultPy;
    float resultSize;
    //シーケンス遷移
    const int INIT = 0;
    const int PLAY = 1;
    const int RESULT = 2;
    int state = INIT;
};
void draw(struct DATA* d);
void drawResult(struct DATA* d);
void loadImages(struct DATA* d) {
    d->playerGuImg = loadImage("assets\\playerGu.png");
    d->playerChokiImg = loadImage("assets\\playerChoki.png");
    d->playerPaImg = loadImage("assets\\playerPa.png");
    d->pcGuImg = loadImage("assets\\pcGu.png");
    d->pcChokiImg = loadImage("assets\\pcChoki.png");
    d->pcPaImg = loadImage("assets\\pcPa.png");
    d->heartImg = loadImage("assets\\heart.png");
}
void init(struct DATA* d) {
    //プレイヤーデータ
    d->playerHand = d->GU;
    d->playerImg = d->playerGuImg;
    d->playerPx = 250;
    d->playerPy = 225;
    d->playerR = 255;
    d->playerG = 255;
    d->playerB = 255;
    d->playerLife = 3;
    d->playerAngle = 0;
    //ＰＣデータ
    d->pcHand = d->GU;
    d->pcImg = d->pcGuImg;
    d->pcPx = 550;
    d->pcPy = 225;
    d->pcR = 255;
    d->pcG = 255;
    d->pcB = 255;
    d->pcLife = 3;
    d->pcAngle = 0;
    //勝ち負け文字
    d->resultPx = 225;
    d->resultPy = 320;
    d->resultSize = 0;
    //ゲームステート切り替え
    d->state = d->PLAY;
}
void play(struct DATA* d) {
    if (isTrigger(KEY_A) || isTrigger(KEY_S) || isTrigger(KEY_D)) {

        if (isTrigger(KEY_A)) { d->playerHand = d->GU; }
        else if (isTrigger(KEY_S)) { d->playerHand = d->CHOKI; }
        else if (isTrigger(KEY_D)) { d->playerHand = d->PA; }
        if (d->playerHand == d->GU) { d->playerImg = d->playerGuImg; }
        else if (d->playerHand == d->CHOKI) { d->playerImg = d->playerChokiImg; }
        else if (d->playerHand == d->PA) { d->playerImg = d->playerPaImg; }

        d->pcHand = random() % 3;
        if (d->pcHand == d->GU) { d->pcImg = d->pcGuImg; }
        else if (d->pcHand == d->CHOKI) { d->pcImg = d->pcChokiImg; }
        else if (d->pcHand == d->PA) { d->pcImg = d->pcPaImg; }

        //勝ち負け判定し、色を変える
        if (d->playerHand == d->pcHand) {
            //あいこ
            d->playerR = 255; d->playerG = 255; d->playerB = 255;
            d->pcR = 255;     d->pcG = 255;     d->pcB = 255;
        }
        else if ((d->playerHand + 1) % 3 == d->pcHand) {
            //プレイヤー勝ち
            d->playerR = 255; d->playerG = 200; d->playerB = 200;
            d->pcR = 255;     d->pcG = 255;     d->pcB = 255;
            d->pcLife--;
        }
        else {
            //ＰＣ勝ち
            d->playerR = 255; d->playerG = 255; d->playerB = 255;
            d->pcR = 255;     d->pcG = 200;     d->pcB = 200;
            d->playerLife--;
        }
        //ゲームステート切り替え
        if (d->playerLife == 0 || d->pcLife == 0) {
            d->state = d->RESULT;
        }
    }
    draw(d);
}
void result(struct DATA* d) {
    //試合終了
    if (d->pcLife == 0) {
        //ＰＣ負け
        d->pcPy += 1.0f;
        d->pcAngle += -0.005f;
    }
    else {
        //プレイヤー負け
        d->playerPy += 1.0f;
        d->playerAngle += 0.005f;
    }
    //勝ち負け文字の大きさ
    if (d->resultSize < 180) {
        d->resultSize += 10.0f;
    }
    //ゲームステート切り替え
    if (isTrigger(KEY_SPACE)) {
        d->state = d->INIT;
    }
    draw(d);
    drawResult(d);
}
void draw(struct DATA* d) {
    clear(200, 200, 200);
    //プレイヤーの手
    rectMode(CENTER);
    imageColor(d->playerR, d->playerG, d->playerB);
    image(d->playerImg, d->playerPx, d->playerPy, d->playerAngle);
    //ＰＣの手
    imageColor(d->pcR, d->pcG, d->pcB);
    image(d->pcImg, d->pcPx, d->pcPy, d->pcAngle);
    //プレイヤーハート
    imageColor(255, 0, 0);
    for (int i = 0; i < d->playerLife; i++) {
        image(d->heartImg, d->playerPx - 50 + i * 50, d->playerPy - 110);
    }
    //ＰＣハート
    for (int i = 0; i < d->pcLife; i++) {
        image(d->heartImg, d->pcPx - 50 + i * 50, d->pcPy - 110);
    }
}
void drawResult(struct DATA* d) {
    //勝ち負けテキスト
    textSize(d->resultSize);
    if (d->playerLife > 0) {
        fill(255, 0, 0);
        text("勝ち", d->resultPx, d->resultPy);
    }
    else {
        fill(0, 0, 200);
        text("負け", d->resultPx, d->resultPy);
    }
}
void gmain() {
    window(800, 450);
    struct DATA d;
    loadImages(&d);
    while (notQuit) {
        if      (d.state == d.INIT) { init(&d); }
        else if (d.state == d.PLAY) { play(&d); }
        else if (d.state == d.RESULT) { result(&d); }
    }
}
